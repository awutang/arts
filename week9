1.Algorithm
  Binary Tree Level Order Traversal  按层遍历
  采用了广度优先搜索的思想，用队列 每轮循环后队列中留下的是一层的节点
  https://leetcode.com/submissions/detail/291671269/

2.review
  https://docs.oracle.com/javase/8/docs/technotes/tools/unix/s11-troubleshooting_tools.html#sthref327
  java中遇到内存、线程等各种问题时可以用于定位问题的各种jdk命令行工具
  jcmd: Sends diagnostic command requests to a running JVM. 发送诊断命令，如果不加任何参数则于jps结果一样，如果加pid参数则可打印某一进程可执行的命令
，可以根据查到的命令进行查询
  jinfo: Experimental. Generates configuration information. 打印某一进程配置信息，补全jps输出
  jmap: Experimental. Prints shared object memory maps or heap memory details for a process, core file, or remote debug server.
  jhat: Experimental. Analyzes the Java heap.
  jmap与jhat配合使用，jmap打印某一进程的堆内存快照等信息，jhat用于分析
  jstack: Experimental. Prints Java thread stack traces for a Java process, core file, or remote debug server. 打印某一进程的线程的栈信息
  jsadebugd: Experimental. Attaches to a Java process or core file and acts as a debug server. 用于在远程机器上执行，然后本地可用jinfo/jmap/jstack
监控远程某一进程。
  

3.tip
  tips1:在涉及到异步调用时，无论是用多线程还是单个线程，记得给线程命名，这对之后排查问题定位具体代码行数很方便。
  tip2:应用启动打印日志时，如果没有打印日志，可以通过jvisualvm把堆栈打印出来看。 就能看出日志卡住那地方是在做什么
  

4.Share
  https://www.cnblogs.com/ITtangtang/p/7608801.html
  线程池的工作原理：提交任务，
    1.判断核心线程池是否已满，未满则创建线程执行任务，核心线程数加1，已满则进入第2步
    2.队列是否已满，未满则加入队列等待分配线程，已满则进入第3步
    3.线程池是否已满即是否到达最大线程数，未满则创建线程执行任务，已满则进入第4步
    4.按照拒绝策略处理无法执行的任务
