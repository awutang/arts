1.Algorithm
  hValidate Binary Search Tree  判断是否为二叉排序树（不能有重复值）
  采用了递归思想，不过利用了一个最小最大值。
  https://leetcode.com/problems/validate-binary-search-tree/submissions/

2.review
  https://waitbutwhy.com/2014/05/life-weeks.html
  1.这篇文章提出了一个有趣的观点，以一周为单位，人的一生就可以在纸上描绘出来了。
  2.把每一周当做一颗钻石，一生就是一勺子钻石。
  3.为了充分利用每一周，要么当前这个钻石能让你快乐，要么当前的不快乐是为了以后的钻石更好，人要在两者之间做一个平衡，
但是如果你为了当前的快乐而损坏以后的钻石，这也是不行的。
  4.更糟糕的某种情况是3中的两点都不满足，这时你会觉得沮丧、人生没意义等，为了避免此种情况，人需要经常进行反思与自我认识。
  5.可以通过人生日历让自己进行反思，并且这也会让自己对人生更有掌控感。
  6.空箱子代表的每一周对所有人都是公平的，关键看你自己选择如何填满它，任何你崇拜的人也是填满的同样的箱子。
  7.人生也是宽容的，无论这一周发生了什么，崭新的下一周仍会来到。
  把每一周当做一颗钻石，一生就是一勺子钻石，要让自己的人生钻石熠熠生辉就要过好每一周，看要不要自己买个人生日历。

3.tip
  traceId在不同服务之间如何传播？（应用场景：对一个请求在调用链的各个服务中能更好的定位日志）
  可以在rpc时将A服务的traceId放在header中给B服务，B服务的拦截器中会校验如果有traceId就不载重新生成，而直接使用A服务的。
  https://blog.csdn.net/yangcheng33/article/details/80796129
  这篇讲了traceId如何跨线程池及跨服务追踪的。

4.Share
  https://juejin.im/post/5a8eb261f265da4e9e307230
  https://www.cnblogs.com/youzhibing/p/9593788.html
  https://www.iteye.com/blog/jinnianshilongnian-1902886
  spring中观察者模式（又叫发布订阅模式）使用：
   1.首先在spring服务启动时将listener（实现了ApplicatoinListener的）注册到ApplicationEventMulticaster 维护的 Listener 集合中,在refresh方法中有这一步骤。
   2.在test中发布事件时，会去遍历之前注册的listener,执行listener的事件方法。
   3.ApplicationListener是订阅者（观察者MessageListener)；ApplicationEventPublisher及ApplicationEventMulticaster是发布者(ApplicationEventPublisher
   委托给ApplicationEventMulticaster执行事件，ApplicationEventMulticaster会获取到服务启动时注册的Applicationlistener去执行真正的事件）(例子中的MessageService也可以认为是发布者）
 ，最终是调用到ApplicationContext中；ApplicationEvent（MessageEvent)是事件。
