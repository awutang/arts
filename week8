1.Algorithm
  Binary Tree Level Order Traversal  按层遍历
  采用了广度优先搜索的思想，用队列 每轮循环后队列中留下的是一层的节点
  https://leetcode.com/submissions/detail/291671269/

2.review
  https://medium.com/swlh/if-you-want-to-be-rich-stop-focusing-on-your-salary-do-this-instead-b7fcb0afc485
  这篇文章讲述的是人要有主动收入也要有被动收入，要增加自己的收入的来源渠道，可以拓展主动收入的渠道也可以拓展被动收入的，主动收入除了本职工作也可以
利用业余时间干点其他的，对于我现在来说还是需要提升自己的本职工作，业余时间还是要用于本职工作的提升；被动收入可以投资、参加付费调查等，对于我来说今年
在投资体验了大半年，收益比以前好很多，明年要更深入自己的投资理财。
  财富不仅仅是钱，管理财富是一系列对策略与行为的实践与学习。我们要管理财富才能获得自由，而不是让自己被金钱所主宰。

3.tip
  MDC Mapped Diagnostic Contexts 存储追踪定位日志的
  在线程与线程池之间使用到MDC时，由于本身MDC中的内容就是对应着线程存储在某个map中的，因此如果某个线程使用之后没有注销又被另一个任务使用，则旧的MDC
内容还在，这时脏数据，因此应该在莫修个任务执行完后就应该MDC.clear().
  其实用到线程池的都会有脏数据的问题，需要及时清理哦。

4.Share
  https://www.jianshu.com/p/1dea7479eb07
  https://blog.csdn.net/a837199685/article/details/52712547
  https://blog.csdn.net/xxcupid/article/details/51955800
  https://blog.csdn.net/yangcheng33/article/details/80796129
  https://ketao1989.github.io/2015/04/29/LogBack-Implemention-And-Slf4j-Mdc/
  1.MDC老版本用的是inheritableThreadLocal，他是如何实现父子线程传递内容的呢？
    1.1 比如在主线程中MDC.put(a,b) 内部实现是首先根据线程得到inheritableThreadLocals（ThreadLocalMap）;其次根据
  inheritableThreadLocal（InheritableThreadLocal）得到Entry对象；最后得到这个Entry对象的value(这个value就是用于存储a,b的hashMap);
  之后将a,b存到这个value中，总之是操作了inheritableThreadLocals
	  1.2 主线程中异步调用另一个线程t，初始化t时从主线程中获取inheritableThreadLocals并设置到子线程的inheritableThreadLocals中，
  主线程的inheritableThreadLocals中如上所述保存着a,b,因此子线程的inheritableThreadLocals也保存着a,b，并且如下所示inheritableThreadLocals中
  的key即inheritableThreadLocal对象也是同一个，value也是同一个对象.
    1.3 MDC中深拷贝与浅拷贝的问题 将父线程的inheritableThreadLocals给子线程时，用InheritableThreadLocal类时浅拷贝，value是同一个hashMap对象，如果
   子线程修改了这个map,父线程的也会受到影响；因此用CopyOnInheritableThreadLocal,hashMap是新创建并且值是复制的，这样父子线程不会相互影响。
  2.MDC之后为了性能问题取消使用InheritableThreadLocal，最后还是使用的是ThreadLocal来作为底层实现，因此父子线程之间无法传递内容了
    2.1 用户自己封装对MDC的使用，在父线程新建子线程之前调用MDC.getCopyOfContextMap()方法将MDC内容取出来存着，子线程在执行操作前先调用
  MDC.setContextMap()方法将存着的父线程的MDC内容设置到子线程。
    2.2 变量传递有四种：线程内部、线程与异步线程、线程与线程池、服务与服务之间，其中二三都能通过上述的自定义封装方式实现变量传递。


